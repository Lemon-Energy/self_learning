一、请说出下列最终的执行结果，并解释为什么
 var a = []
 for (var i = 0; i < 10; i++) {
     a[i] = function() {
         console.log(i)
     }
 }

 a[6]()

 答：最终执行结果为10，因为var关键字不会将i变量限定在for的作用域中，for循环中只对a数组的
 第6个元素进行了赋值，但并没有立即调用执行，当a[6]被执行的时候，for循环已结束，此时的i的值为10

 二、请说出下列最终的执行结果，并解释为什么
 var tmp = 123
 if (true) {
     console.log(tmp);
     let tmp
 }
 答：结果会出现报错ReferenceError: Cannot access 'tmp' before initialization
 在if的作用域中有声明tmp，所以console.log的tmp变量会使用自身作用域内的tmp，而let关键字
 所声明的变量并不允许在声明之前被使用

 三、结合ES6新语法，用最简单的方式找出数组中的最小值
 var arr = [12, 34, 32, 89, 4]
 console.log(arr.sort((a, b) => a-b)[0])

 四、请详细说明var、let、const三种声明变量的方式之间的具体差别
 答：var关键字声明的变量，其作用域是该声明语言所在作用域，且存在变量提升的现象
    let关键字声明的变量，其作用域为该声明语句所在的代码块内，且不存在变量提升
    const关键字声明的变量是常量，在后面的代码中不能修改常量的值，具体表现是基本
    类型数据变量直接不可修改，引用类型数据则表现为不可修改其引用的地址
 
 五、请说出下列代码最终输出的结果，并解释为什么
 var a = 10
 var obj = {
     a: 20,
     fn () {
         setTimeout(() => {
             console.log(this.a)
         })
     }
 }
 obj.fn()
 答：输出的结果为20；原因是：setTimeout中的执行语句对于obj中的属性数据有引用，所以当
 obj.fn执行完，setTimeout进入了异步等待队列中，GC并没有马上吧obj回收，当setTimeout
 的回调执行时，依然可以访问到obj中的a属性

 六、简述Symbol类型的用途
 答：用于声明一个独一无二的值，避免对象成员重名

 七、说说什么是浅拷贝，什么是深拷贝
 答：浅拷贝：对一个对象进行拷贝，其内的基本类型值的属性直接拷贝，引用类型属性值只拷贝引用地址即为浅拷贝
    深拷贝：对于基本类型值的属性，与浅拷贝相同，引用类型值的属性，也完全拷贝，不再是指向同一空间地址
          可以认为深拷贝后的数据对象与原数据对象已是两个独立互不影响的个体
 
 八、请简述TypeScript与JavaScript之间的关系
 答：TypeScript是JavaScript的超集，在使用TypeScript时，完全可以使用JavaScript的语法
 TypeScript则比JavaScript多了类型系统，如不深究细节的话，简单的理解为有类型要求的JavaScript也可以

 九、请谈谈你所认为的TypeScript优缺点
 答：优点：类型系统明确了变量的类型，从一开始就明确数据类型，可以在后续开发的代码逻辑中少很多判断逻辑，
         其实逻辑上反而更严谨
    缺点：对于已经习惯了使用JavaScript的开发者来说，需要一定时间的适应期，变量可以随意赋值虽然会造成
         bug，但确实也很方便

 十、描述引用计数的工作原理和优缺点
 答：
   工作原理：设置引用数，引用计数器，当数据变量引用关系改变时修改对应的引用数，当引用数为0时就立即回收
   优点：1、发现垃圾时立即回收；2、最大限度减少程序暂停
   缺点：1、无法回收循环引用的对象；2、时间开销大，需要时刻监测计数的变化，而计数的变化可能太多

 十一、描述标记整理算法的工作流程
 答：标记阶段：遍历所有对象找到并标记活动的可达对象
    整理阶段：将已标记的对象和未标记的对象进去整理
    清除阶段：将整理后未标记的对象清除，并把已标记对象的标记去除

 十二。描述V8中新生代存储区垃圾回收的流程
 答：将新生代内存区分为二等分空间，定为使用空间From和空闲空间To；
    活动对象存储于Form空间中，标记整理后将活动对象拷贝至To空间；
    将From和To进行交换，原From空间变为To空间并且清空
    对象从From空间拷贝至To空间时可能存在晋升的操作，晋升数据将移至老生代存储空间

 十三、描述增量标记算法在何时使用及工作原理
 答：在老生代区域进行垃圾回收时使用，主要是提高效率；垃圾回收会阻塞程序执行，所以拆分
    增量标记次数，在程序执行空闲的时候分段与程序交替执行来减少阻塞